#include "mainwindow3.h"
#include "ui_mainwindow3.h"
#include<QPainter>
#include<QPen>
#include<QBrush>
#include<QPixmap>
#include<QPoint>
#include<QMouseEvent>
#include<QPalette>
#include<QString>
#include<QMouseEvent>
#include<QMessageBox>
#include<QMovie>
#include<QLabel>
#include<QVector>
#include<QTimer>

MainWindow3::MainWindow3(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow3)
{
    ui->setupUi(this);
    setMouseTracking(true);
    setFixedSize(1380,950);//设置窗口大小（子界面）
    memset(a,0,20*20*sizeof (int));//初始化数组
    //子界面返回按钮
    rbutton2=new QPushButton(this);
    rbutton2->setText("返回");//录入“返回”
    rbutton2->move(36,850);//数据由多次试验调整得来，界面看上去最好看
    connect(rbutton2,&QPushButton::clicked,this,&MainWindow3::sendslot);//信号
    setWindowTitle("六子棋小游戏");//设置子界面标题
    setAutoFillBackground(true);//设置背景
    QPalette palette;//创建调色板，控制窗体的颜色信息
    palette.setColor(QPalette::Background,QColor("#EEC070"));//选择颜色
    setPalette(palette);//设置背景色

    //创建动画
    QMovie *myMovie=new QMovie("://9.gif");//从资源库复制路径
    ui->labelGif->setGeometry(850,50,500,500);
    //设置动画
    ui->labelGif->setMovie(myMovie);
    //启动动画
    myMovie->start();
    ui->labelGif->setScaledContents(true);//适应大小

    //创建图片
    ui->labelimage->setPixmap(QPixmap("://8.png"));//从资源库复制路径
    ui->labelimage->setScaledContents(true);//图片适应大小
    ui->labelimage->setGeometry(850,600,500,200);//放置在合适的位置

}

MainWindow3::~MainWindow3()
{
    delete ui;
}

void MainWindow3::sendslot()
{
    emit Mysignal2();//发出信号
}

void MainWindow3::mouseMoveEvent(QMouseEvent *event)
{   int x=event->x();//获取鼠标点击位置
    int y=event->y();
    double l;//距离
    int k=(x-40)/40,r=(y-50)/40;//
    int posx=40+40*k;//按规矩的落子点位
    int posy=50+40*r;
    //判断落子坐标位置(x,y)
    if(x>40&&x<840&&y>50&&y<850)//棋盘x长840，y长850，鼠标点击位置在棋盘范围内
    {   l=sqrt((x-posx)*(x-posx)+(y-posy)*(y-posy));
        if(l<10){
            b=r;c=k;
        }
        l=sqrt((x-posx-40)*(x-posx-40)+(y-posy)*(y-posy));
        if(l<10)
        {
            b=r;c=k+1;//+1->a[][]中的j
        }
        l=sqrt((x-posx)*(x-posx)+(y-posy-40)*(y-posy-40));
        if(l<10)
        {
             b=r+1;c=k;//+1->a[][]中的i
        }
        l=sqrt((x-posx-40)*(x-posx-40)+(y-posy-40)*(y-posy-40));
        if(l<10)
        {
             b=r+1;c=k+1;
        }
    }
    //保证下棋的合法性,设置小弹窗提醒
    else {
        QMessageBox::information(this,QStringLiteral("注意"),QStringLiteral("不在棋盘内，请重下。"),QMessageBox::Ok);
    }

    this->update();//存坐标，重绘
}

void MainWindow3::mouseReleaseEvent(QMouseEvent *)
{

    //判断黑棋还是白棋胜利
    if(Win(b,c)&&a[b][c]==1)//黑棋胜利
    {
        update();
        QMessageBox::information(this,QStringLiteral("Black"),QStringLiteral("黑棋胜利!"),QMessageBox::Ok);
    }
    if(Win(b,c)&&a[b][c]==-1)//白棋胜利
    {
        update();
        QMessageBox::information(this,QStringLiteral("White"),QStringLiteral("白棋胜利!"),QMessageBox::Ok);
    }

    update();

}

//Win函数，四种赢法里任意一种即为胜利
int MainWindow3::Win(int b, int c)
{
    return (s1(b,c)||s2(b,c)||s3(b,c)||s4(b,c));
}

//几种赢的方式
int MainWindow3::s1(int b, int c)//竖排
{
    for(int i=0;i<6;i++){
        if(c-i>=0 && c+5-i<=20 &&
          a[b][c-i] == a[b][c+1-i] &&
          a[b][c-i] == a[b][c+2-i] &&
          a[b][c-i] == a[b][c+3-i] &&
          a[b][c-i] == a[b][c+4-i] &&
          a[b][c-i] == a[b][c+5-i])
               return 1;
    }
           return 0;
}
int MainWindow3::s2(int b, int c)//横排
{
    for(int i=0;i<6;i++){
        if(b-i>=0 && b+5-i<=20 &&
          a[b-i][c] == a[b+1-i][c] &&
          a[b-i][c] == a[b+2-i][c] &&
          a[b-i][c] == a[b+3-i][c] &&
          a[b-i][c] == a[b+4-i][c] &&
          a[b-i][c] == a[b+5-i][c])
               return 1;
    }
           return 0;
}
int MainWindow3::s3(int b, int c)//对角线1
{
    for(int i=0;i<6;i++){
        if( b-i>=0 && c-i>=0 &&
            b+5-i<=20 && c+5-i<=20 &&
          a[b-i][c-i] == a[b+1-i][c+1-i] &&
          a[b-i][c-i] == a[b+2-i][c+2-i] &&
          a[b-i][c-i] == a[b+3-i][c+3-i] &&
          a[b-i][c-i] == a[b+4-i][c+4-i] &&
          a[b-i][c-i] == a[b+5-i][c+5-i])
               return 1;
    }
           return 0;
}
int MainWindow3::s4(int b, int c)//对角线2
{
    for(int i=0;i<6;i++){
        if( b-i>=0 && c-i>=0 &&
            b+5-i<=20 && c+5-i<=20 &&
          a[b+i][c-i] == a[b-1+i][c+1-i] &&
          a[b+i][c-i] == a[b-2+i][c+2-i] &&
          a[b+i][c-i] == a[b-3+i][c+3-i] &&
          a[b+i][c-i] == a[b-4+i][c+4-i] &&
          a[b+i][c-i] == a[b-5+i][c+5-i])
               return 1;
    }
           return 0;
}

void MainWindow3::pcbeat(int &clickx, int &clicky)
{
    count();
    int max=0;
    std::vector<std::pair<int,int>> maxPoints;
    for(int b=1;b<20;b++)
    for(int c=1;c<20;c++)
    {
        if(a[b][c]==0)
        {
            if(score[b][c]>max)
            {
               maxPoints.clear();
               max=score[b][c];
               maxPoints.push_back(std::make_pair(b,c));
            }
            else if(score[b][c]==max)
               maxPoints.push_back(std::make_pair(b,c));
        }
    }
    srand((unsigned)time(0));
    int index=rand()%maxPoints.size();
    std::pair<int,int>pointPair=maxPoints.at(index);
    clickx=pointPair.first;
    clicky=pointPair.second;
    updatedesk(clickx,clicky);
}

void MainWindow3::updatedesk(int r, int k)
{
    if(player==1)
     a[r][k]=1;
    else {
     a[r][k]=-1;
    }
    player=(-1)*player;//到下一个棋子
}

void MainWindow3::count ()
{
    int pn=0;//连棋个数（人）
    int cn=0;//连棋个数（机）
    int kn=0;//空点个数
    memset(score,0,20*20*sizeof (int));
    //遍历，棋盘上的任意一点
    for(int r=0;r<20;r++)
           for(int k=0;k<20;k++)
           {
               //寻找空点（可下位置）
               if(r>0&&k>0&&a[r][k]==0)
               {
                   //遍历空点周围八个方向
                 for(int y=-1;y<=1;y++)
                 for(int x=-1;x<=1;x++)
                 {
                    //这个方向循环后进行重置
                      pn=0;
                      cn=0;
                      kn=0;
                      //空点位置不看
                      if(y!=0&&x!=0)
                      {
                        //对玩家（正反两个方向）
                        //注意：kn的值<=2，kn用来判断死棋活棋
                        //为玩家算分（正反两个方向）
                       for(int i=1;i<=5;i++)//每个方向延伸5个子
                       {
                           if(r+i*y>0&&r+i*y<20&&
                               k+i*x>0&&k+i*x<20&&
                              a[r+i*y][k+i*x]==-1) //玩家白棋
                           {
                               pn++;
                           }
                           else if(r+i*y>0&&r+i*y<20&&
                                   k+i*x>0&&k+i*x<20&&
                                   a[r+i*y][k+i*x]==0) //空位
                           {
                               kn++;
                               break;
                           }
                        else            //出了边界
                               break;
                        }

                        for(int i=1;i<=5;i++)
                        {
                           for(int i=1;i<=5;i++)//每个方向延伸5个子
                           {
                               if(r-i*y>0&&r-i*y<20&&
                                  k-i*x>0&&k-i*x<20&&
                                  a[r-i*y][k-i*x]==-1) //玩家白棋
                               {
                                   pn++;
                               }
                               else if(r-i*y>0&&r-i*y<20&&
                                       k-i*x>0&&k-i*x<20&&
                                       a[r-i*y][k-i*x]==0) //空白位
                               {
                                   kn++;
                                   break;
                               }
                            else            // 出了边界
                                   break;
                         }
                         //分数越高，AI就下在哪里
                         //kn==1表示死棋，kn==2表示活棋，围堵活棋的胜率更大
                         if(pn==0)
                         score[r][k]=score[r][k]+5;
                         else if(pn==1)
                         score[r][k]=score[r][k]+10;
                         else if(pn==2)
                         {
                             if(kn==1)
                             score[r][k]=score[r][k]+20;
                             else if(kn==2)
                             score[r][k]=score[r][k]+30;
                          }
                         else if(pn==3)
                         {
                             if(kn==1)
                             score[r][k]=score[r][k]+50;
                             else if(kn==2)
                             score[r][k]=score[r][k]+60;
                          }
                         else if (pn==4)
                         {   if(kn==1)
                             score[r][k]=score[r][k]+70;
                             else if(kn==2)
                             score[r][k]=score[r][k]+80;
                         }
                         else if (pn==5)
                         {
                             score[r][k]=100;
                         }

                         kn=0;//清空，为下面对AI的算分服务
                         //正反两个方向
                         for(int i=1;i<=5;i++)//每个方向延伸5个子
                         {
                             if(r+i*y>0&&r+i*y<20&&
                                 k+i*x>0&&k+i*x<20&&
                                a[r+i*y][k+i*x]==1) //AI黑棋
                             {
                                 cn++;
                             }
                             else if(r+i*y>0&&r+i*y<20&&
                                     k+i*x>0&&k+i*x<20&&
                                     a[r+i*y][k+i*x]==0) //空位
                             {
                                 kn++;
                                 break;
                             }
                          else            //出了边界
                                 break;
                          }

                          for(int i=1;i<=5;i++)
                         {
                             for(int i=1;i<=5;i++)//每个方向延伸5个子
                             {
                                 if(r-i*y>0&&r-i*y<20&&
                                    k-i*x>0&&k-i*x<20&&
                                    a[r-i*y][k-i*x]==1) //AI黑棋
                                 {
                                     cn++;
                                 }
                                 else if(r-i*y>0&&r-i*y<20&&
                                         k-i*x>0&&k-i*x<20&&
                                         a[r-i*y][k-i*x]==0) //空白位
                                 {
                                     kn++;
                                     break;
                                 }
                              else            // 出了边界
                                     break;
                           }
                           if(cn==0)//没有黑棋
                           score[r][k]=score[r][k]+5;
                           else if(cn==1)
                           {
                               score[r][k]=score[r][k]+10;
                            }
                           else if(cn==2)
                           {
                               if(kn==1)
                               score[r][k]=score[r][k]+25;
                               else if(kn==2)
                               score[r][k] =score[r][k]+35;
                           }
                           else if(cn==3)
                           {   if(kn==1)
                               score[r][k]=score[r][k]+45;
                               else if(kn==2)
                               score[r][k]=score[r][k]+55;
                           }
                           else if(cn==4)
                           {
                               if(kn==1)
                               score[r][k]=score[r][k]+65;
                               else if(kn==2)
                               score[r][k]=score[r][k]+75;
                           }
                           else if(cn>=5)
                           {
                                score[r][k]=90;
                           }
                         }
                      }
                   }
                 }
               }
           }

}
void MainWindow3::actionAI()
{
    pcbeat(b,c);
    update();
}

void MainWindow3::paintEvent(QPaintEvent *)
{
    QPainter painter(this);//定义画家
    painter.drawPixmap(0,0,width(),height(),QPixmap());
    painter.setRenderHint(QPainter::Antialiasing,true);//抗锯齿

    QPen pen;//定义画笔
    pen.setWidth(3);//设置线宽
    pen.setColor(Qt::black);//设置颜色
    painter.setPen(pen);//将画笔交给画家

    //画20*20棋盘，小格子40*40
    for(int i=0;i<21;i++)
    {
        painter.drawLine(40+i*40,50,40+i*40,50+20*40);//纵线 初始x=40,y=50
        painter.drawLine(40,50+i*40,40+20*40,50+i*40);//横线
    }
    QBrush brush;//定义画刷
    brush.setColor(Qt::black);//定义颜色
    brush.setStyle(Qt::SolidPattern);//定义填充样式
    painter.setBrush(brush);//将画刷交给画家
    painter.drawEllipse(40+10*40+4-10,50+10*40+4-10,10,10);//画小圆

    //画棋子，在第i行第j列画圆，40距离左边的空隙，50距离上边的空隙
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                if(a[i][j]==1)//黑子
                {
                    brush.setColor(Qt::black);
                    painter.setBrush(brush);//(j+1)*40代表最左边的距离，(i+1)*40+10)代表最上边的距离
                    painter.drawEllipse(QPoint((j+1)*40,(i+1)*40+10),20,20);
                }
                else if(a[i][j]==-1)//白子
                {   brush.setColor(Qt::white);
                    painter.setBrush(brush);
                    painter.drawEllipse(QPoint((j+1)*40,(i+1)*40+10),20,20);
                }
            }
        }
}
