#include "mainwindow2.h"
#include "ui_mainwindow2.h"
#include<QPainter>
#include<QPen>
#include<QBrush>
#include<QPixmap>
#include<QPoint>
#include<QMouseEvent>
#include<QPalette>
#include<QString>
#include<QMouseEvent>
#include<QMessageBox>
#include<QMovie>
#include<QLabel>
#include<QPushButton>

MainWindow2::MainWindow2(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow2)
{
    ui->setupUi(this);
    setFixedSize(1380,950);//设置窗口大小（子界面）
    memset(a,0,20*20*sizeof (int));//初始化数组

    //子界面返回按钮
    //对应Mainwindow.h中QPushButton *rbutton
    rbutton=new QPushButton(this);
    rbutton->setText("返回");//录入“返回”
    //打算将返回按钮放在棋盘下方
    //数据由多次调试得来，界面看上去最好看
    rbutton->move(36,850);
    connect(rbutton,&QPushButton::clicked,this,&MainWindow2::sendslot);//信号
    setWindowTitle("六子棋小游戏");//设置子界面标题
    setAutoFillBackground(true);
    //设置autoFillBackground属性为真，自动填充
    //再调用QPalette
    QPalette palette;//创建调色板，控制窗体的颜色信息
    palette.setColor(QPalette::Background,QColor("#EEC070"));//选择颜色
    setPalette(palette);//设置背景色

    //利用ui创建动画
    QMovie *myMovie=new QMovie("://4.gif");//从资源库复制路径
    //ui->访问界面里的小控件labelGif
    //(500*500)的正方形
    ui->labelGif->setGeometry(850,50,500,500);
    //设置动画
    ui->labelGif->setMovie(myMovie);
    //启动动画
    myMovie->start();
    ui->labelGif->setScaledContents(true);//动图适应大小

    //创建图片
    //ui->访问界面里的小控件labelimage
    ui->labelimage->setPixmap(QPixmap("://8.png"));//从资源库复制路径
    ui->labelimage->setScaledContents(true);//图片适应大小
    ui->labelimage->setGeometry(850,600,500,200);//放置在合适的位置

}

MainWindow2::~MainWindow2()
{
    delete ui;
}

void MainWindow2::sendslot()
{
    emit Mysignal1();//发出信号
}
void MainWindow2::paintEvent(QPaintEvent *)
{
    QPainter painter(this);//定义画家
    painter.setRenderHint(QPainter::Antialiasing,true);//抗锯齿

    QPen pen;//定义画笔
    pen.setWidth(3);//设置线宽
    pen.setColor(Qt::black);//设置颜色黑色
    painter.setPen(pen);//将画笔交给画家

    //画20*20棋盘，小格子40*40
    //纵线横线分别画21条线
    for(int i=0;i<21;i++)
    {
        painter.drawLine(40+i*40,50,40+i*40,50+20*40);//纵线 初始x=40,y=50
        painter.drawLine(40,50+i*40,40+20*40,50+i*40);//横线
    }
    QBrush brush;//定义画刷
    brush.setColor(Qt::black);//定义颜色
    brush.setStyle(Qt::SolidPattern);//定义填充样式实心
    painter.setBrush(brush);//将画刷交给画家
    painter.drawEllipse(40+10*40+4-10,50+10*40+4-10,10,10);//画棋盘中间小圆

    //画棋子，在第i行第j列画圆，40距离左边的空隙，50距离上边的空隙
    //第j列->x=(j+1)*40，第i行->y=(i+1)*40+10
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                if(a[i][j]==1)//黑子
                {
                    brush.setColor(Qt::black);
                    painter.setBrush(brush);
                    //(j+1)*40代表最左边的距离，(i+1)*40+10)代表最上边的距离
                    //(i+1)*40+10)，离上边（40+10）=50
                    //画半径为10的圆，填充黑色
                    painter.drawEllipse(QPoint((j+1)*40,(i+1)*40+10),20,20);
                }
                else if(a[i][j]==2)//白子
                {   brush.setColor(Qt::white);
                    painter.setBrush(brush);
                    painter.drawEllipse(QPoint((j+1)*40,(i+1)*40+10),20,20);
                }
            }
        }
}

void MainWindow2::mouseMoveEvent(QMouseEvent *event)
{   int x=event->x();//获取鼠标点击位置
    int y=event->y();
    double l;//距离
    //鼠标点击位置距离点位有偏差
    //r代表x，k代表y
    int k=(x-40)/40,r=(y-50)/40;
    //按规矩的落子点位
    int posx=40+40*k;
    int posy=50+40*r;
    //判断落子坐标位置(x,y)
    //a[i][j]--a[b][c]
    //棋盘x长840，y长850，鼠标点击位置在棋盘范围内
    if(x>40&&x<840&&y>50&&y<850)
    {   l=sqrt((x-posx)*(x-posx)+(y-posy)*(y-posy));
        //利用数学公式d^2=(x-a)^2+(y-b)^2
        //l是鼠标点击位置距离棋盘点位的距离
        if(l<10){
            b=r;c=k;
        }
        l=sqrt((x-(posx+40))*(x-(posx+40))+(y-posy)*(y-posy));
        if(l<10)
        {
            b=r;c=k+1;//+1->a[][]中的j,圆心中的x
        }
        l=sqrt((x-posx)*(x-posx)+(y-(posy+40))*(y-(posy+40)));
        if(l<10)
        {
             b=r+1;c=k;//+1->a[][]中的i,圆心中的y
        }
        l=sqrt((x-posx-40)*(x-posx-40)+(y-posy-40)*(y-posy-40));
        if(l<10)
        {
             b=r+1;c=k+1;
        }
    }
    //保证下棋在棋盘内，设置小弹窗提醒
    else {
        QMessageBox::information(this,QStringLiteral("注意"),QStringLiteral("不在棋盘内，请重下。"),QMessageBox::Ok);
    }

    this->update();//存坐标，重绘
}

void MainWindow2::mouseReleaseEvent(QMouseEvent *)
{
    if(!a[b][c])
    {   //黑棋先手，判断下黑子还是白子
        //player初始值为2，利用除余
        a[b][c]=player %2+1;
        player++;
    }

    //判断黑棋还是白棋胜利
    if(Win(b,c)&&a[b][c]==1)//黑棋胜利
    {
        update();
        //设置胜利小弹窗
        QMessageBox::information(this,QStringLiteral("Black"),QStringLiteral("黑棋胜利!"),QMessageBox::Ok);
    }
    if(Win(b,c)&&a[b][c]==2)//白棋胜利
    {
        update();
        //设置胜利小弹窗
        QMessageBox::information(this,QStringLiteral("White"),QStringLiteral("白棋胜利!"),QMessageBox::Ok);
    }
    //判断和棋，在棋盘棋子下满后和棋
    //棋盘一共21*21个点，player为2
    if(player>442)
    {
        QMessageBox::information(this,QStringLiteral("Hello"),QStringLiteral("厉害，和棋!"),QMessageBox::Ok);
    }
    update();
}

//Win函数，四种赢法里任意一种即为胜利
int MainWindow2::Win(int b, int c)
{
    return (s1(b,c)||s2(b,c)||s3(b,c)||s4(b,c));
}

//四种赢的方式
int MainWindow2::s1(int b, int c)//竖排
{   //(c-i>=0 && c+5-i<=20）判断在棋盘内
    for(int i=0;i<6;i++){
        if(c-i>=0 && c+5-i<=20 &&
          a[b][c-i] == a[b][c+1-i] &&
          a[b][c-i] == a[b][c+2-i] &&
          a[b][c-i] == a[b][c+3-i] &&
          a[b][c-i] == a[b][c+4-i] &&
          a[b][c-i] == a[b][c+5-i])
               return 1;
    }
           return 0;
}
int MainWindow2::s2(int b, int c)//横排
{
    for(int i=0;i<6;i++){
        if(b-i>=0 && b+5-i<=20 &&
          a[b-i][c] == a[b+1-i][c] &&
          a[b-i][c] == a[b+2-i][c] &&
          a[b-i][c] == a[b+3-i][c] &&
          a[b-i][c] == a[b+4-i][c] &&
          a[b-i][c] == a[b+5-i][c])
               return 1;
    }
           return 0;
}
int MainWindow2::s3(int b, int c)//对角线1：＼
{
    for(int i=0;i<6;i++){
        if( b-i>=0 && c-i>=0 &&
            b+5-i<=20 && c+5-i<=20 &&
          a[b-i][c-i] == a[b+1-i][c+1-i] &&
          a[b-i][c-i] == a[b+2-i][c+2-i] &&
          a[b-i][c-i] == a[b+3-i][c+3-i] &&
          a[b-i][c-i] == a[b+4-i][c+4-i] &&
          a[b-i][c-i] == a[b+5-i][c+5-i])
               return 1;
    }
           return 0;
}
int MainWindow2::s4(int b, int c)//对角线2：/
{
    for(int i=0;i<6;i++){
        if( b-i>=0 && c-i>=0 &&
            b+5-i<=20 && c+5-i<=20 &&
          a[b+i][c-i] == a[b-1+i][c+1-i] &&
          a[b+i][c-i] == a[b-2+i][c+2-i] &&
          a[b+i][c-i] == a[b-3+i][c+3-i] &&
          a[b+i][c-i] == a[b-4+i][c+4-i] &&
          a[b+i][c-i] == a[b-5+i][c+5-i])
               return 1;
    }
           return 0;
}

